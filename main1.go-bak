// package main

// import (
// 	"fmt"
// 	"image"
// 	"image/color"
// 	"image/jpeg"
// 	"image/png"
// 	"log"
// 	"os"

// 	mydraw "github.com/lcl101/gowf/draw"
// 	// "gopkg.in/gographics/imagick.v2/imagick"
// )

// func main() {
// 	// fmt.Println("xxx")
// 	// data := []float64{0.014, 0.032, 0.047, 0.064, 0.064, 0.067, 0.070, 0.098, 0.136, 0.152, 0.197, 0.226, 0.250, 0.256, 0.259, 0.304, 0.315, 0.332, 0.330, 0.281, 0.303, 0.307, 0.252, 0.216, 0.133, 0.177, 0.346, 0.323, 0.277, 0.232, 0.212, 0.256, 0.341, 0.498, 0.389, 0.356, 0.199, 0.191, 0.197, 0.290, 0.557, 0.438, 0.356, 0.287, 0.291, 0.241, 0.525, 0.576, 0.442, 0.310, 0.155, 0.197, 0.284, 0.845, 0.642, 0.483, 0.323, 0.215, 0.164, 0.302, 0.607, 0.544, 0.385, 0.257, 0.372, 0.364, 0.558, 0.696, 0.673, 0.369, 0.239, 0.317, 0.365, 0.592, 0.687, 0.581, 0.470, 0.444, 0.360, 0.445, 0.736, 0.582, 0.400, 0.274, 0.237, 0.261, 0.413, 0.586, 0.625, 0.803, 0.759, 0.543, 0.431, 0.596, 0.494, 0.488, 0.522, 0.596, 0.618, 0.490, 0.623, 0.685, 0.724, 0.600, 0.497, 0.588, 0.380, 0.453, 0.501, 0.530, 0.455, 0.576, 0.654, 0.674, 0.649, 0.623, 0.523, 0.644, 0.471, 0.412, 0.587, 0.563, 0.432, 0.414, 0.608, 0.484, 0.636, 0.718, 0.552, 0.529, 0.556, 0.348, 0.334, 0.393, 0.423, 0.315, 0.275, 0.324, 0.311, 0.323, 0.400, 0.302, 0.311, 0.289, 0.203, 0.185, 0.230, 0.185, 0.332, 0.318, 0.342, 0.465, 0.419, 0.283, 0.366, 0.381, 0.387, 0.312, 0.358, 0.508, 0.372, 0.427, 0.434, 0.330, 0.373, 0.558, 0.751, 0.549, 0.540, 0.503, 0.481, 0.515, 0.414, 0.380, 0.498, 0.537, 0.606, 0.541, 0.740, 0.718, 0.627, 0.674, 0.516, 0.501, 0.480, 0.471, 0.529, 0.686, 0.857, 0.858, 0.943, 0.745, 0.748, 0.658, 0.491, 0.582, 0.463, 0.459, 0.447, 0.515, 0.619, 0.724, 0.806, 0.684, 0.704, 0.600, 0.480, 0.626, 0.587, 0.558, 0.528, 0.379, 0.416, 0.603, 0.549, 0.713, 0.696, 0.576, 0.609, 0.441, 0.361, 0.363, 0.376, 0.490, 0.495, 0.400, 0.635, 0.509, 0.587, 0.490, 0.511, 0.674, 0.416, 0.383, 0.295, 0.264, 0.258, 0.250, 0.357, 0.422, 0.492, 0.503, 0.414, 0.413, 0.323, 0.287, 0.227, 0.328, 0.363, 0.393, 0.440, 0.443, 0.448, 0.574, 0.840, 0.850, 0.923, 0.684, 0.720, 0.520, 0.469, 0.508, 0.419, 0.468, 0.666, 0.789, 0.912, 0.869, 0.685, 0.505, 0.510, 0.437, 0.458, 0.351, 0.557, 0.786, 0.935, 0.913, 0.823, 0.689, 0.551, 0.368, 0.419, 0.401, 0.370, 0.588, 0.769, 0.936, 0.796, 0.780, 0.670, 0.771, 0.538, 0.507, 0.434, 0.448, 0.410, 0.827, 0.882, 0.900, 0.843, 0.809, 0.660, 0.631, 0.550, 0.456, 0.523, 0.639, 0.668, 0.937, 0.735, 0.934, 0.945, 0.857, 0.756, 0.844, 0.933, 0.864, 0.955, 0.566, 0.574, 0.764, 0.751, 0.883, 0.905, 0.902, 0.712, 0.705, 0.657, 0.561, 0.795, 0.712, 0.750, 0.545, 0.759, 0.842, 0.831, 0.764, 0.825, 0.852, 0.736, 0.535, 0.665, 0.740, 0.595, 0.923, 0.473, 0.582, 0.674, 0.793, 0.819, 0.770, 0.842, 0.575, 0.481, 0.459, 0.586, 0.807, 0.880, 0.749, 0.564, 0.610, 0.556, 0.697, 0.708, 0.916, 0.848, 0.759, 0.712, 0.868, 0.942, 0.865, 0.953, 0.932, 0.732, 0.656, 0.512, 0.560, 0.588, 0.753, 0.817, 0.894, 0.934, 0.834, 0.646, 0.617, 0.611, 0.453, 0.464, 0.715, 0.846, 0.906, 0.950, 0.913, 0.707, 0.779, 0.601, 0.613, 0.582, 0.629, 0.514, 0.655, 0.935, 0.906, 0.949, 0.919, 0.892, 0.641, 0.468, 0.486, 0.531, 0.539, 0.711, 0.908, 0.826, 0.903, 0.952, 0.732, 0.710, 0.767, 0.709, 0.573, 0.485, 0.551, 0.592, 0.664, 0.865, 0.935, 0.916, 0.901, 0.746, 0.651, 0.598, 0.643, 0.635, 0.618, 0.551, 0.578, 0.608, 0.675, 0.575, 0.505, 0.429, 0.484, 0.514, 0.573, 0.545, 0.460, 0.296, 0.373, 0.443, 0.450, 0.497, 0.587, 0.423, 0.221, 0.226, 0.282, 0.358, 0.487, 0.477, 0.324, 0.222, 0.176, 0.170, 0.220, 0.382, 0.356, 0.346, 0.215, 0.146, 0.139, 0.212, 0.303, 0.236, 0.197, 0.208, 0.107, 0.112, 0.135, 0.122, 0.084, 0.071, 0.051, 0.038, 0.042, 0.046, 0.028, 0.018, 0.012, 0.008, 0.005, 0.003, 0.004, 0.001, 0.001, 0.000, 0.000, 0.000, 0.000, 0.000}
// 	test1()
// }

// func test1() {
// 	data1 := []float64{0.001, 0.011, 0.331, 0.364, 0.301, 0.272, 0.327, 0.326, 0.335, 0.403, 0.365, 0.344, 0.342, 0.385, 0.394, 0.319, 0.285, 0.378, 0.377, 0.366, 0.335, 0.326, 0.345, 0.339, 0.299, 0.363, 0.341, 0.344, 0.337, 0.333, 0.368, 0.340, 0.296, 0.338, 0.339, 0.283, 0.319, 0.382, 0.316, 0.341, 0.338, 0.305, 0.339, 0.283, 0.337, 0.341, 0.291, 0.301, 0.275, 0.379, 0.322, 0.349, 0.334, 0.412, 0.338, 0.359, 0.292, 0.412, 0.382, 0.369, 0.351, 0.393, 0.335, 0.296, 0.475, 0.817, 0.603, 0.690, 0.530, 0.526, 0.548, 0.557, 0.378, 0.809, 0.602, 0.594, 0.675, 0.510, 0.584, 0.672, 0.487, 0.748, 0.617, 0.651, 0.465, 0.494, 0.633, 0.566, 0.411, 0.505, 0.613, 0.447, 0.397, 0.612, 0.839, 0.442, 0.694, 0.679, 0.838, 0.677, 0.637, 0.578, 0.506, 0.600, 0.874, 0.806, 0.726, 0.727, 0.577, 0.622, 0.803, 0.686, 0.898, 0.566, 0.694, 0.476, 0.463, 0.490, 0.606, 0.387, 0.472, 0.453, 0.561, 0.379, 0.426, 0.518, 0.745, 0.709, 0.805, 0.777, 0.777, 0.561, 0.560, 0.583, 0.585, 0.343, 0.671, 0.580, 0.580, 0.578, 0.598, 0.625, 0.798, 0.489, 0.701, 0.671, 0.674, 0.493, 0.516, 0.659, 0.568, 0.480, 0.462, 0.508, 0.558, 0.432, 0.410, 0.615, 0.681, 0.444, 0.767, 0.784, 0.885, 0.575, 0.648, 0.562, 0.513, 0.384, 0.902, 0.661, 0.648, 0.706, 0.459, 0.646, 0.739, 0.577, 0.598, 0.602, 0.347, 0.353, 0.540, 0.597, 0.369, 0.402, 0.473, 0.560, 0.389, 0.446, 0.518, 0.832, 0.614, 0.854, 0.754, 0.747, 0.518, 0.696, 0.722, 0.911, 0.792, 0.704, 0.611, 0.711, 0.406, 0.440, 0.597, 0.839, 0.574, 0.722, 0.783, 0.659, 0.666, 0.775, 0.588, 0.502, 0.477, 0.555, 0.599, 0.731, 0.579, 0.684, 0.661, 0.691, 0.640, 0.863, 0.770, 0.723, 0.691, 0.816, 0.686, 0.678, 0.641, 0.835, 0.663, 0.697, 0.627, 0.564, 0.413, 0.691, 0.441, 0.772, 0.615, 0.964, 0.612, 0.523, 0.923, 0.961, 0.573, 0.643, 0.664, 0.963, 0.549, 0.413, 0.791, 0.876, 0.504, 0.878, 0.966, 0.963, 0.499, 0.739, 0.704, 0.568, 0.890, 0.681, 0.915, 0.751, 0.760, 0.828, 0.963, 0.640, 0.966, 0.759, 0.961, 0.596, 0.544, 0.783, 0.916, 0.717, 0.597, 0.485, 0.935, 0.466, 0.510, 0.725, 0.930, 0.621, 0.785, 0.554, 0.962, 0.564, 0.786, 0.906, 0.863, 0.759, 0.761, 0.677, 0.952, 0.622, 0.736, 0.837, 0.942, 0.645, 0.815, 0.770, 0.966, 0.560, 0.573, 0.915, 0.917, 0.624, 0.887, 0.579, 0.948, 0.490, 0.624, 0.743, 0.964, 0.498, 0.805, 0.821, 0.880, 0.584, 0.592, 0.965, 0.869, 0.657, 0.883, 0.692, 0.964, 0.656, 0.557, 0.909, 0.836, 0.541, 0.943, 0.733, 0.945, 0.640, 0.687, 0.806, 0.721, 0.619, 0.671, 0.907, 0.535, 0.544, 0.824, 0.886, 0.569, 0.867, 0.607, 0.960, 0.715, 0.606, 0.966, 0.918, 0.637, 0.932, 0.670, 0.921, 0.599, 0.683, 0.653, 0.918, 0.697, 0.818, 0.594, 0.928, 0.741, 0.543, 0.960, 0.849, 0.725, 0.819, 0.526, 0.966, 0.501, 0.560, 0.710, 0.775, 0.873, 0.873, 0.673, 0.948, 0.696, 0.881, 0.822, 0.964, 0.722, 0.940, 0.692, 0.963, 0.610, 0.728, 0.932, 0.955, 0.657, 0.927, 0.606, 0.855, 0.763, 0.775, 0.731, 0.850, 0.574, 0.706, 0.781, 0.961, 0.710, 0.657, 0.714, 0.867, 0.735, 0.917, 0.820, 0.909, 0.752, 0.745, 0.962, 0.901, 0.752, 0.952, 0.578, 0.620, 0.491, 0.520, 0.893, 0.557, 0.803, 0.809, 0.952, 0.572, 0.474, 0.798, 0.922, 0.835, 0.864, 0.539, 0.842, 0.451, 0.606, 0.769, 0.965, 0.656, 0.723, 0.527, 0.939, 0.471, 0.474, 0.834, 0.773, 0.652, 0.627, 0.527, 0.966, 0.488, 0.557, 0.900, 0.953, 0.716, 0.964, 0.732, 0.950, 0.726, 0.926, 0.808, 0.854, 0.818, 0.847, 0.708, 0.966, 0.688, 0.683, 0.788, 0.838, 0.461, 0.846, 0.443, 0.408, 0.363, 0.264, 0.230, 0.177, 0.144, 0.094, 0.061, 0.042, 0.034, 0.021, 0.013, 0.005, 0.003, 0.003, 0.002, 0.002, 0.001, 0.001, 0.001, 0.001, 0.001, 0.001}
// 	// fmt.Println(data)

// 	// d := mydraw.NewDrawAlpha()
// 	// d.Computed = data1
// 	// img := d.Draw()
// 	img := mydraw.Draw(6, 1, 5, data1)
// 	// Encode results as PNG to stdout
// 	if err := png.Encode(os.Stdout, img); err != nil {
// 		panic(err)
// 	}
// }

// func test() {
// 	dx := 500
// 	dy := 200

// 	file, err := os.Create("test.jpeg")
// 	if err != nil {
// 		log.Fatal(err)
// 	}
// 	defer file.Close()
// 	alpha := image.NewAlpha(image.Rect(0, 0, dx, dy))
// 	for x := 0; x < dx; x++ {
// 		for y := 0; y < dy; y++ {
// 			alpha.Set(x, y, color.Alpha{uint8(x % 256)}) //设定alpha图片的透明度
// 		}
// 	}

// 	fmt.Println(alpha.At(400, 100))    //144 在指定位置的像素
// 	fmt.Println(alpha.Bounds())        //(0,0)-(500,200)，图片边界
// 	fmt.Println(alpha.Opaque())        //false，是否图片完全透明
// 	fmt.Println(alpha.PixOffset(1, 1)) //501，指定点相对于第一个点的距离
// 	fmt.Println(alpha.Stride)          //500，两个垂直像素之间的距离
// 	jpeg.Encode(file, alpha, nil)      //将image信息写入文件中
// }
